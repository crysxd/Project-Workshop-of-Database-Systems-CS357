--------------------------------------------------------------------------------
General:
Every answer must contain the field success. This field (boolean) 
must either be true or false. If success is false the field error_code must 
be provided (integer).

--------------------------------------------------------------------------------
General Error Codes:
0:  Internal/Genral Error
1:  Called a protected URL from invalid session
2:  Required parameter missing

--------------------------------------------------------------------------------
api/1.0/customer/resturants
    - Description:
        Returns a list of all restaurants in a set radius arround the supplied 
        location. If no location is supplied random restaurants are returned.
    - Method: 
        GET
    - Parameter:
        - center_lat: Latitude of the user's current position
        - center_long: Longitude of the user's current position
        - start: Start of the limit for the current query (see SQL LIMIT)
        - count: Range of the limit for the current query (see SQL LIMIT)
    - Errors:
        No restaurants found: Return empty list
    - Answer Success:
        {
            "success": true,
            "item_count": 5,
            "data": [
                {
                    "id": 0,
                    "name": "Restaurant Uno",
                    "position_lat": 42.0234,
                    "position_long": 34.4545,
                    "avg_rating": 4.5,
                    "rating_count": 102,
                    "shipping_cost": 0,
                    "min_order_value": 10.0
                    "eta": 30,
                    "icon_mime": "image/png",
                    "icon": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms="
                },
                {
                    "id": 1,
                    "name": "Restaurant Duo",
                    "position_lat": 42.466,
                    "position_long": 34.5464,
                    "avg_rating": 4.8,
                    "rating_count": 102,
                    "shpping_cost": 0,
                    "min_order_value": 12.5,
                    "eta": 30,
                    "icon_mime": "image/png",
                    "icon": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms="
                }
            ]
        }

--------------------------------------------------------------------------------
api/1.0/customer/menu
    - Description:
        Returns the menu of the restaurant with the given id.
    - Method:
        GET
    - Parameter:
        - restaurant: ID of the restaurant which's meals are requetsed
        - order: The field which should be used to order the result (e.g. price)
        - direction: The direction of the order, either ASC or DESC
        - start: Start of the limit for the current query (see SQL LIMIT)
        - count: Range of the limit for the current query (see SQL LIMIT)
        - search: A search string (user SQL LIKE and %seach%)
    - Errors:
        Restaurant has no meals/restaurant not found: Return empty list
    - Answer:
        {
            "success": true,
            "description": "The best restaurant you will find!",
            "min_order_value": 12.4,
            "icon": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms=",
            "shipping_cost": 0,
            "data": [
                {
                    "name": "Hot Rice",
                    "price": 2.5,
                    "spicy": 3,
                    "avg_rating": 4.8,
                    "rating_count": 24
                    "tags": [
                        {"name": "Vegan", "color": "#FF0000"},
                        {"name": "Vegetarian", "color": "#00FF00"}
                    ]
                },
                {
                    "name": "Hot Rice",
                    "price": 2.5,
                    "spicy": 3,
                    "avg_rating": 4.8,
                    "rating_count": 24
                    "tags": [
                        {"name": "Vegan", "color": "#FF0000"},
                        {"name": "Vegetarian", "color": "#00FF00"}
                    ]
                }
            ]
        }
--------------------------------------------------------------------------------
api/1.0/customer/dish
    - Description:
        Returns the ratings and further information for the dish with the 
        given id.
    - Method:
        GET
    - Parameter:
        - dish: The ID of the meal which's ratings are requested
        - start: Start of the limit for the current query (see SQL LIMIT)
        - count: Range of the limit for the current query (see SQL LIMIT)
    - Error:
        Meal not found: Return error code 1000
    - Answer:
        {
            "success": true
            "image": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms=",
            "description": "Lorem ipsum dolor sit amet",
            "avg_rating": 4.5,
            "rating_count": 234,
            "data": [
                {
                    "composer": "cool_guy",
                    "rating": 4.0,
                    "comment": "Best stuff!",
                    "date": "2015-04-31"
                },
                {
                    "composer": "other-guy",
                    "rating": 4.0,
                    "comment": "Was ok!",
                    "date": "2015-04-31"
                },
            ]
        }

--------------------------------------------------------------------------------
api/1.0/customer/login
    - Description:
        Creates a session for the user if the pw is correct.
    - Method:
        GET
    - Parameter:
        - user: The user's nick name
        - pw: The user's password
    - Error:
        Password or user wrong: Return error code 1000
    - Answer Sucess:
        {
            "success": true,
            "session": 848395782,
            "nick": "user"
        }
--------------------------------------------------------------------------------
api/1.0/customer/logout
    - Description:
        Terminates the session if the nick name corresponses to the one saved
        in the database
    - Method:
        GET
    - Parameter:
        - user: The user's nick name
        - session: The session which  should be terminated
    - Errors:
        Errors are not reported
    - Answer:
        {
            "success": true
        }

--------------------------------------------------------------------------------
api/1.0/customer/delivery
    - Description:
        Used to place a delivery. The user and the session must be valid.
    - Method:
        PUT, GET
    - Parameter:
        -PUT
            - user: The user's nick name
            - session: The session which is used to order
            - PUT input: 
                {
                    "restaurant": 0,
                    "dishes": [
                        {"id": 0, "quantity": 1},
                        {"id": 5, "quantity": 1},
                        {"id": 42, "quantity": 12},
                        {"id": 1337, "quantity": 1},
                    ]
                    "address": [
                        "number": 800,
                        "street": "Dong Chuan Lu",
                        "city": "Minghang Qu",
                        "postcode": "23423",
                        "lat": 23.3434,
                        "lang": 23.344
                    ]
                }
        - GET
            - user: The user's nick name
            - session: The session which is used to order
            - delivery: The delivery's ID
    - Errors:
        - Dish is not available in restaurant: Return error code 100
    - Answer PUT:
        {
            "success": true,
            "eta_minutes": 32,
            "restaurant_phone": 1303445439
        }
    - Answer GET:
        {
            "success": true,
            "restaurant": "A cool restaurant",
            "phone": "8347897942",
            "shipping_costs": 34,
            "number": 800,
            "street": "Dong Chuan Lu",
            "city": "Shanghai",
            "postcode": "435435"
            "dishes": [
                        {"id": 0, "quantity": 1, "price": 34},
                        {"id": 5, "quantity": 1, "price": 34},
                        {"id": 42, "quantity": 12, "price": 34},
                        {"id": 1337, "quantity": 1, "price": 34},
                    ]
            "states": [
                        {"state": "Pending", "date": "13:23 2015-03-31",},
                        {"state": "Processing", "date": "13:23 2015-03-31"},
                        {"state": "In Delivery", "date": "13:23 2015-03-31"},
                        {"state": "Done", "date": "13:23 2015-03-31"}
            ]
        }

--------------------------------------------------------------------------------
api/1.0/customer/address
&zip=&province=
    - Description:
        Used to receive and set the user's address
    - Method:
        GET, UPDATE
    - Parameter:
        - GET:
            - session: The session which is used to update
            - user: The user's nick name
        - PUT:
            - session: The session which is used to update
            - phone: The user's phone number
            - street: The user's street and house number
            - district: The user's district
            - postcode: The user's postal  code
            - city: The user's city
            - province: The user's province
    - Answer GET:
        {
            "success": true,
            "street": "Dongchuan Road 500",
            "distrcit": "Minhang",
            "postcode": "3847",
            "province": "Shanghai",
            "city": "Shanghai"
        }
    - Answer PUT:
        {
            "success": true
        }
    
--------------------------------------------------------------------------------
api/1.0/customer/info
    - Description:
        Used to receive and set user informations or to create a completely new
        user.
    - Method:
        GET, PUT, POST
        If PUT is used a new user is generated, therefore the new session is 
        returned in the anser. If POST or GET is used the user must be logged
        in and the parameter session must be supplied
    - Parameter:
        - GET:
            - session: The session which is used to update
            - phone: The user's nick name
        - POST:     
            - first_name: The user's first name
            - sure_name: The user's sure name
            - pw: The user's password
            - nick: The user's nick name
            - password: The user's password
            - session: The session which is used to update
        - PUT:
            - first_name: The user's first name
            - sure_name: The user's sure name
            - pw: The user's password
            - phone: The user's phone numver
            - nick: The user's nick name
    - Errors:
        Phone number already exists: Return error code 1000
        Nick already exists: Return error code 1001
        Password is too short: Return error code 1003
    - Answer Sucess PUT:
        {
            "success": true,
            "session": 848395782
        }
    - Answer Sucess POST:
        {
            "success": true,
        }
    - Answer Sucess GET:
        {
            "success": true,
            "nick": "cool_guy",
            "phone": 13032424398,
            "first_name": "Cool",
            "sure_name": "Guy",
            "ratable_dishes": [
                {
                    "id": 0, 
                    "name": "sksdfh", 
                    "date": "2015-05-14", 
                    "restaurant": "Cool Restaurant"
                },
                {
                    "id": 1, 
                    "name": "2sdf", 
                    "date": "2015-05-13", 
                    "restaurant": "Cool Restaurant"
                },
            ]
            "ongoing_deliveries": [
                {
                    "id": 2,
                    "restaurant": "A cool Restaurant",
                    "state": "Processing",
                    "state_since": "2015-05-14"
                }
            ],
            "old_deliveries": [
                {
                    "id": 2,
                    "restaurant": "A cool Restaurant",
                    "state": "Processing",
                    "state_since": "2015-05-14"
                }
            ]
        }
        
--------------------------------------------------------------------------------
api/1.0/customer/rate
    - Description:
        Used to rate a meal.
    - Method:
        PUT
    - Parameter:
        meal: The meal' id
        user: The user's  nick name
        session: The session
        rating: The rating (0-5)
        comment: The user's comment
    - Errors:
        User is not allowed to rate meal: Return error code 1000
        Comment is too long: Return error code 1001
        User already rated meal: Return error code 1002
    - Answer Success:
        {
            "success": true
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/login
    - Description:
        Used to log in as restaurant
    - Method:
        GET
    - Parameter:
        - id: The restaurant's phone number
        - pw: The restaurant's password
    - Error:
        Password or id wrong: Return error code 100
    - Answer Sucess:
        {
            "success": true,
            "session": 848395782
            "id": 2834962
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/logout
    - Description:
        Used to log out as restaurant
    - Method:
        GET
    - Parameter:
        - id: The restaurant's id
        - session: The session which  should be terminated
    - Errors:
        Errors are not reported
    - Answer (fixed, errors are not reported):
        {
            "success": true,
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/info
    - Description:
        Used to receive and set informations about a restaurant or to create 
        a completely new restaurant user.
    - Method:
        GET, PUT, UPDATE
        If PUT is used a new restaurant is generated, therefore the new session 
        is returned in the answer. If UPDATE or GET is used the restaurant
        must be logged in and the parameter session must be supplied
    - Parameter:
        - GET:
            - session: The session which is used to update
            - id: The restaurant's id
        - POST:     
            - name: The restaurant's name
            - min_order_value: The restaurant's minimum order value
            - shipping_cost: The restaurant's shipping costs
            - max_delivery_range: The restaurant's maximum delivery range
            - POST data: The restaurant's icon as Base64
            - street: The restaurant's street
            - postcode: The restaurant's postal code
            - phone: The restaurant's phone number
            - city: The restaurant's city
            - country: The restaurant's country
            - province: The restaurant's province
            - position_lat: The restaurant's latitude
            - poisition_long: The restaurant's longitude
            - pw: The restaurant's password
            - description: The restaurant's description text
            - session: The session that is used to change the information
            - id: The restaurant's id
        - PUT:
            - name: The restaurant's name
            - min_order_value: The restaurant's minimum order value
            - shipping_cost: The restaurant's shipping costs
            - max_delivery_range: The restaurant's maximum delivery range
            - PUT data: The restaurant's icon as Base64
            - street: The restaurant's street
            - postcode: The restaurant's postal code
            - phone: The restaurant's phone number
            - city: The restaurant's city
            - country: The restaurant's country
            - position_lat: The restaurant's latitude
            - poisition_long: The restaurant's longitude
            - pw: The restaurant's password
            - description: The restaurant's description text
    - Errors:
        restaurant name already exists: Return error code 1000
    - Answer Sucess PUT:
        {
            "success": true,
            "session": 848395782
            "id": 23482
        }
    - Answer Sucess POST:
        {
            "success": true,
        }
    - Answer Sucess GET:
        {
            "name": "A cool Restaurant",
            "min_order_value": 45.4
            "shipping_cost": 0.3
            "max_delivery_range": 234 
            "icon": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms=",
            "street": "iohosd",
            "postcode": "4543",
            "district": "sdfsdfd"
            "city": "dsfsdf",
            "province": "dfssf",
            "position_lat": 234.3,
            "poisition_long": 23.3,
            "description": "ksdhiohsoifdjd"
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/deliveries
    - Description:
        Used to receive and set informations about a restaurant or to create 
        a completely new restaurant user.
    - Method:
        GET
    - Parameter:
        - state: The state all provided deliveries should have
        - session: The session which is used
        - id: The restaurant's id
        - start: Start of the limit for the current query (see SQL LIMIT)
        - count: Range of the limit for the current query (see SQL LIMIT)
    - Answer: 
        {
            "success": true,
            "data": [
               {
                    "id": 2,
                    "date": "2015-05-14",
                    "shipping_cost": 43.3,
                    "total_price": 345.34,
                    "customer": "nick",
                    "state": "Done",
                    "dishes": [
                        {
                            "name": "Dish name",
                            "amount": 3,
                            "price_per_item": 45.5
                        }
                    ]
                },
                {
                    "id": 3,
                    "date": "2015-02-14",
                    "shipping_cost": 0.0,
                    "total_price": 345.34,
                    "customer": "nick",
                    "state": "Done",
                    "dishes": [
                        {
                            "name": "Dish name",
                            "amount": 3,
                            "price_per_item": 45.5
                        }
                    ]
                }
            ]
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/state
    - Description:
        Returnes all possible states
    - Method:
        PUT
    - Parameters:
        - session: The session which is used
        - id: The restaurant's id
        - state: The new state
        - delivery: The delivery which's state should be changed
    - Answer PUT:
        {
            "success": true,
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/dish
    - Description: 
        Used to get, add, change or delte dishes of the restaurant. The get 
        methos returns only a thumbnail sized image!
    - Mehtod:
        GET, PUT, UPDATE, DELETE
    - Parameters:
        - GET: 
            - session: The session which is used
            - id: The restaurant's id
        - PUT:
            - session: The session which is used
            - id: The restaurant's id
            - name: The dish's name
            - price: The dish's price
            - description: The dish's discription
            - tags: All Tag ids added to the dish (JSON Array)
            - PUT data: The image as Base64 
        - POST:
            - session: The session which is used
            - id: The restaurant's id
            - dish: The id of the dish which should be updated
            - name: The dish's name
            - price: The dish's price
            - description: The dish's discription
            - tags: All Tag ids added to the dish (JSON Array)
            - POST data: The image as Base64
        - DELETE
            - session: The session which is used
            - id: The restaurant's id
            - dish: The id of the dish which should be deleted
    - Answer GET:
        {
            "success": true,
            "data": [
                {
                    "id": 0,
                    "name": "A meal",
                    "price": 3.4
                    "description": "dsfsfd"
                    "tags": [
                        {"name": "Vegan", "color": "#FF0000"},
                        {"name": "Vegetarian", "color": "#00FF00"}
                    ],
                    "image": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms="
                },
                {
                    "id": 2,
                    "name": "An other meal",
                    "price": 3.4
                    "description": "dsfsfd"
                    "tags": [
                        {"name": "Vegan", "color": "#FF0000"},
                        {"name": "Vegetarian", "color": "#00FF00"}
                    ],
                    "image": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms="
                }
            ]
        }

    - Answer PUT:
        {
            "success": true,
            "dish": 0
        } 
    - Answer POST:
        {
            "success": true
        }
    - Answer DELETE:
        {
            "success": true
        }

--------------------------------------------------------------------------------
api/1.0/restaurant/dish_image
    - Description:
        Used to load a full size dish image.
    - Method:
        GET, PUT
    - Parameters:
        - GET:
            - session: The session which is used
            - id: The restaurant's id
            - dish: The id of the dish which image should be returned
        - POST:
            - session: The session which is used
            - id: The restaurant's id
            - dish: The id of the dish which image should be returned
            - The image is supplied as POST data as raw data!
    - Answer:
        {
            "sucess": true,
            "image": "UG9seWZvbiB6d2l0c2NoZXJuZCBhw59lbiBNw6R4Y2hlbnMg
                    VsO2Z2VsIFLDvGJlbiwgSm9naHVydCB1bmQgUXVhcms="
        }
